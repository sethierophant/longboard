//! An imageboard engine.
//!
//! In order to add a page, you'll want to add a route in `routes`, and you'll
//! probably also want to add a view in `views`. See both modules for examples.

/* █│  █│ █▀▀╵ █│ █│
 * █▀▀▀█│ █▀▀╵ █▄▄█│ ▄▄╷
 * ▀╵  ▀╵ ▀▀▀╵ ▄▄▄█│  █│
 *
 * ███╗  ██╗██╗ █████╗ ███████╗   █████╗  █████╗  █████╗ ██╗  ██╗
 * ████╗ ██║██║██╔══██╗██╔════╝  ██╔══██╗██╔══██╗██╔══██╗██║ ██╔╝
 * ██╔██╗██║██║██║  ╚═╝█████╗    ██║  ╚═╝██║  ██║██║  ╚═╝█████═╝
 * ██║╚████║██║██║  ██╗██╔══╝    ██║  ██╗██║  ██║██║  ██╗██╔═██╗
 * ██║ ╚███║██║╚█████╔╝███████╗  ╚█████╔╝╚█████╔╝╚█████╔╝██║ ╚██╗
 * ╚═╝  ╚══╝╚═╝ ╚════╝ ╚══════╝   ╚════╝  ╚════╝  ╚════╝ ╚═╝  ╚═╝
*/

#![feature(proc_macro_hygiene)]
#![feature(decl_macro)]
#![feature(never_type)]
#![feature(trait_alias)]

#[macro_use]
extern crate diesel;
extern crate diesel_migrations;

use std::fmt::Write;
use std::string::ToString;

use rocket::config::{Config as RocketConfig, Environment, LoggingLevel};
use rocket::fairing::{Fairing, Info, Kind};
use rocket::http::StatusClass;
use rocket::{Request, Response, Rocket};

use rocket_contrib::templates::Template;

use log::{info, warn};

pub mod config;
pub mod error;
pub mod models;
pub mod parse;
pub mod routes;
pub mod views;

use config::Config;
pub use error::{Error, Result};
use models::{ConnectionPool, User};

/// Auto-generated by diesel.
pub mod schema;

/// A rocket fairing for logging about requests.
pub struct LogFairing;

impl Fairing for LogFairing {
    fn info(&self) -> Info {
        Info {
            name: "Logging Fairing",
            kind: Kind::Launch | Kind::Response,
        }
    }

    fn on_launch(&self, rocket: &Rocket) {
        let conf = rocket.config();

        info!("Starting on {}:{}", conf.address, conf.port);
    }

    fn on_response(&self, request: &Request, response: &mut Response) {
        let mut msg = String::new();

        let ip = request
            .client_ip()
            .map(|ip| ip.to_string())
            .unwrap_or(String::from("Unknown"));

        let user_hash = request
            .guard::<User>()
            .succeeded()
            .map(|user| user.hash.split('$').last().unwrap().to_string())
            .unwrap_or(String::from("Unknown"));

        write!(msg, "[{}] [{}]", ip, user_hash).unwrap();
        write!(msg, " {}", request.method()).unwrap();
        write!(msg, " {}", request.uri().to_string()).unwrap();
        write!(msg, " {}", response.status()).unwrap();

        if let Some(content_type) = response.content_type() {
            write!(msg, " ({})", content_type).unwrap();
        }

        if let Some(referer) = request.headers().get_one("Referer") {
            write!(msg, " Referer \"{}\"", referer).unwrap();
        }

        if let Some(user_agent) = request.headers().get_one("User-Agent") {
            write!(msg, " User-Agent \"{}\"", user_agent).unwrap();
        }

        if let StatusClass::ClientError | StatusClass::ServerError =
            response.status().class()
        {
            warn!("{}", msg);
        } else {
            info!("{}", msg);
        }
    }
}

pub mod sql_types {
    //! Re-exports from `models::sql_types`.
    pub use crate::models::staff::sql_types::Role;
}

/// Create a new rocket instance for our application.
pub fn new_instance(config: Config) -> Result<Rocket> {
    let conf = config.global();

    let template_dir = conf.resource_dir.join("templates");

    let rocket_conf = RocketConfig::build(Environment::Development)
        .address(conf.address)
        .port(conf.port)
        .log_level(LoggingLevel::Off)
        .extra("template_dir", template_dir.display().to_string())
        .finalize()
        .unwrap();

    Ok(rocket::custom(rocket_conf)
        .mount("/", crate::routes::routes())
        .manage(ConnectionPool::new(conf.database_uri)?)
        .manage(config)
        .attach(Template::fairing())
        .attach(LogFairing))
}
